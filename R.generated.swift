//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  /// This `R.color` struct is generated, and contains static references to 2 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `LaunchScreenBackgroundColor`.
    static let launchScreenBackgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "LaunchScreenBackgroundColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "LaunchScreenBackgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func launchScreenBackgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.launchScreenBackgroundColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 7 properties.
  struct entitlements {
    static let comAppleDeveloperSiri = true
    static let comAppleSecurityAppSandbox = true
    static let comAppleSecurityNetworkClient = true
    static let comAppleSecurityPersonalInformationAddressbook = true
    static let comAppleSecurityPersonalInformationCalendars = true
    static let comAppleSecurityPersonalInformationLocation = true

    struct comAppleSecurityApplicationGroups {
      static let groupComVinhnxClendar = infoPlistString(path: ["com.apple.security.application-groups"], key: "group.com.vinhnx.Clendar") ?? "group.com.vinhnx.Clendar"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 17 files.
  struct file {
    /// Resource file `Settings.bundle`.
    static let settingsBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "Settings", pathExtension: "bundle")
    /// Resource file `dark_icon_120@2x.png`.
    static let dark_icon_1202xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dark_icon_120@2x", pathExtension: "png")
    /// Resource file `dark_icon_180@3x.png`.
    static let dark_icon_1803xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dark_icon_180@3x", pathExtension: "png")
    /// Resource file `dim_dark_icon_120@2x.png`.
    static let dim_dark_icon_1202xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dim_dark_icon_120@2x", pathExtension: "png")
    /// Resource file `dim_dark_icon_180@3x.png`.
    static let dim_dark_icon_1803xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "dim_dark_icon_180@3x", pathExtension: "png")
    /// Resource file `icon1_120.png`.
    static let icon1_120Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon1_120", pathExtension: "png")
    /// Resource file `icon1_180.png`.
    static let icon1_180Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon1_180", pathExtension: "png")
    /// Resource file `icon2_120.png`.
    static let icon2_120Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon2_120", pathExtension: "png")
    /// Resource file `icon2_180.png`.
    static let icon2_180Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon2_180", pathExtension: "png")
    /// Resource file `icon3_120.png`.
    static let icon3_120Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon3_120", pathExtension: "png")
    /// Resource file `icon3_180.png`.
    static let icon3_180Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon3_180", pathExtension: "png")
    /// Resource file `icon4_120.png`.
    static let icon4_120Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon4_120", pathExtension: "png")
    /// Resource file `icon4_180.png`.
    static let icon4_180Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon4_180", pathExtension: "png")
    /// Resource file `icon5_120.png`.
    static let icon5_120Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon5_120", pathExtension: "png")
    /// Resource file `icon5_180.png`.
    static let icon5_180Png = Rswift.FileResource(bundle: R.hostingBundle, name: "icon5_180", pathExtension: "png")
    /// Resource file `original_120.png`.
    static let original_120Png = Rswift.FileResource(bundle: R.hostingBundle, name: "original_120", pathExtension: "png")
    /// Resource file `original_180.png`.
    static let original_180Png = Rswift.FileResource(bundle: R.hostingBundle, name: "original_180", pathExtension: "png")

    /// `bundle.url(forResource: "Settings", withExtension: "bundle")`
    static func settingsBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.settingsBundle
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dark_icon_120@2x", withExtension: "png")`
    static func dark_icon_1202xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dark_icon_1202xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dark_icon_180@3x", withExtension: "png")`
    static func dark_icon_1803xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dark_icon_1803xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dim_dark_icon_120@2x", withExtension: "png")`
    static func dim_dark_icon_1202xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dim_dark_icon_1202xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "dim_dark_icon_180@3x", withExtension: "png")`
    static func dim_dark_icon_1803xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.dim_dark_icon_1803xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon1_120", withExtension: "png")`
    static func icon1_120Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon1_120Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon1_180", withExtension: "png")`
    static func icon1_180Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon1_180Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon2_120", withExtension: "png")`
    static func icon2_120Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon2_120Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon2_180", withExtension: "png")`
    static func icon2_180Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon2_180Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon3_120", withExtension: "png")`
    static func icon3_120Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon3_120Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon3_180", withExtension: "png")`
    static func icon3_180Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon3_180Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon4_120", withExtension: "png")`
    static func icon4_120Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon4_120Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon4_180", withExtension: "png")`
    static func icon4_180Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon4_180Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon5_120", withExtension: "png")`
    static func icon5_120Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon5_120Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "icon5_180", withExtension: "png")`
    static func icon5_180Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.icon5_180Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "original_120", withExtension: "png")`
    static func original_120Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.original_120Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "original_180", withExtension: "png")`
    static func original_180Png(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.original_180Png
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 17 images.
  struct image {
    /// Image `dark_icon_120`.
    static let dark_icon_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark_icon_120")
    /// Image `dark_icon_180`.
    static let dark_icon_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dark_icon_180")
    /// Image `dim_dark_icon_120`.
    static let dim_dark_icon_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dim_dark_icon_120")
    /// Image `dim_dark_icon_180`.
    static let dim_dark_icon_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "dim_dark_icon_180")
    /// Image `icon1_120`.
    static let icon1_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon1_120")
    /// Image `icon1_180`.
    static let icon1_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon1_180")
    /// Image `icon2_120`.
    static let icon2_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon2_120")
    /// Image `icon2_180`.
    static let icon2_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon2_180")
    /// Image `icon3_120`.
    static let icon3_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon3_120")
    /// Image `icon3_180`.
    static let icon3_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon3_180")
    /// Image `icon4_120`.
    static let icon4_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon4_120")
    /// Image `icon4_180`.
    static let icon4_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon4_180")
    /// Image `icon5_120`.
    static let icon5_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon5_120")
    /// Image `icon5_180`.
    static let icon5_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon5_180")
    /// Image `original_120`.
    static let original_120 = Rswift.ImageResource(bundle: R.hostingBundle, name: "original_120")
    /// Image `original_180`.
    static let original_180 = Rswift.ImageResource(bundle: R.hostingBundle, name: "original_180")
    /// Image `spotlight_icon`.
    static let spotlight_icon = Rswift.ImageResource(bundle: R.hostingBundle, name: "spotlight_icon")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark_icon_120", bundle: ..., traitCollection: ...)`
    static func dark_icon_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark_icon_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dark_icon_180", bundle: ..., traitCollection: ...)`
    static func dark_icon_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dark_icon_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dim_dark_icon_120", bundle: ..., traitCollection: ...)`
    static func dim_dark_icon_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dim_dark_icon_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dim_dark_icon_180", bundle: ..., traitCollection: ...)`
    static func dim_dark_icon_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dim_dark_icon_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon1_120", bundle: ..., traitCollection: ...)`
    static func icon1_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon1_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon1_180", bundle: ..., traitCollection: ...)`
    static func icon1_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon1_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon2_120", bundle: ..., traitCollection: ...)`
    static func icon2_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon2_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon2_180", bundle: ..., traitCollection: ...)`
    static func icon2_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon2_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon3_120", bundle: ..., traitCollection: ...)`
    static func icon3_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon3_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon3_180", bundle: ..., traitCollection: ...)`
    static func icon3_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon3_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon4_120", bundle: ..., traitCollection: ...)`
    static func icon4_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon4_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon4_180", bundle: ..., traitCollection: ...)`
    static func icon4_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon4_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon5_120", bundle: ..., traitCollection: ...)`
    static func icon5_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon5_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon5_180", bundle: ..., traitCollection: ...)`
    static func icon5_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon5_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "original_120", bundle: ..., traitCollection: ...)`
    static func original_120(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.original_120, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "original_180", bundle: ..., traitCollection: ...)`
    static func original_180(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.original_180, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "spotlight_icon", bundle: ..., traitCollection: ...)`
    static func spotlight_icon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.spotlight_icon, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct nsUserActivityTypes {
      static let comVinhnxClendarSiriShortcutAddEvent = infoPlistString(path: ["NSUserActivityTypes"], key: "com.vinhnx.Clendar.SiriShortcut.addEvent") ?? "com.vinhnx.Clendar.SiriShortcut.addEvent"
      static let comVinhnxClendarSiriShortcutOpenSettings = infoPlistString(path: ["NSUserActivityTypes"], key: "com.vinhnx.Clendar.SiriShortcut.openSettings") ?? "com.vinhnx.Clendar.SiriShortcut.openSettings"
      static let comVinhnxClendarSiriShortcutOpenShortcuts = infoPlistString(path: ["NSUserActivityTypes"], key: "com.vinhnx.Clendar.SiriShortcut.openShortcuts") ?? "com.vinhnx.Clendar.SiriShortcut.openShortcuts"
      static let configurationIntent = infoPlistString(path: ["NSUserActivityTypes"], key: "ConfigurationIntent") ?? "ConfigurationIntent"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    /// Nib `AppIconItemCell`.
    static let appIconItemCell = _R.nib._AppIconItemCell()
    /// Nib `EventListItemCell`.
    static let eventListItemCell = _R.nib._EventListItemCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AppIconItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.appIconItemCell) instead")
    static func appIconItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.appIconItemCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "EventListItemCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.eventListItemCell) instead")
    static func eventListItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.eventListItemCell)
    }
    #endif

    static func appIconItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppIconItemCell? {
      return R.nib.appIconItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppIconItemCell
    }

    static func eventListItemCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventListItemCell? {
      return R.nib.eventListItemCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventListItemCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `EventListItemCell`.
    static let eventListItemCell: Rswift.ReuseIdentifier<EventListItemCell> = Rswift.ReuseIdentifier(identifier: "EventListItemCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 109 localization keys.
    struct localizable {
      /// en translation: Add event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let addEvent = Rswift.StringResource(key: "Add event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: All day
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let allDay = Rswift.StringResource(key: "All day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: App info
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let appInfo = Rswift.StringResource(key: "App info", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Are you sure you want to delete this event?
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let areYouSureYouWantToDeleteThisEvent = Rswift.StringResource(key: "Are you sure you want to delete this event?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Auto-select day
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let autoSelectDay = Rswift.StringResource(key: "Auto-select day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Auto-select day when month changes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let autoSelectDayWhenMonthChanges = Rswift.StringResource(key: "Auto-select day when month changes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Auto-select first day of month/week when calendar changes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let autoSelectFirstDayOfMonthWeekWhenCalendarChanges = Rswift.StringResource(key: "Auto-select first day of month/week when calendar changes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Available calendars
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let availableCalendars = Rswift.StringResource(key: "Available calendars", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Calendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let calendar = Rswift.StringResource(key: "Calendar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Calendar View
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let calendarView = Rswift.StringResource(key: "Calendar View", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Calendar grid view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let calendarGridView = Rswift.StringResource(key: "Calendar grid view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Calendars
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let calendars = Rswift.StringResource(key: "Calendars", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Calendars Visibility
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let calendarsVisibility = Rswift.StringResource(key: "Calendars Visibility", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Cancel
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let cancel = Rswift.StringResource(key: "Cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Change app Language
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let changeAppLanguage = Rswift.StringResource(key: "Change app Language", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Check calendar at a glance
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let checkCalendarAtAGlance = Rswift.StringResource(key: "Check calendar at a glance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Choose your desired app icon
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let chooseYourDesiredAppIcon = Rswift.StringResource(key: "Choose your desired app icon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Collapse this view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let collapseThisView = Rswift.StringResource(key: "Collapse this view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Create new Clendar event(s)
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let createNewClendarEventS = Rswift.StringResource(key: "Create new Clendar event(s)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Create new event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let createNewEvent = Rswift.StringResource(key: "Create new event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Custom App Icon
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let customAppIcon = Rswift.StringResource(key: "Custom App Icon", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Dark
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let dark = Rswift.StringResource(key: "Dark", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let date = Rswift.StringResource(key: "Date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Date Info Widget
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let dateInfoWidget = Rswift.StringResource(key: "Date Info Widget", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Default
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let `default` = Rswift.StringResource(key: "Default", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Default event duration
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let defaultEventDuration = Rswift.StringResource(key: "Default event duration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Delete
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let delete = Rswift.StringResource(key: "Delete", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Delete Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let deleteEvent = Rswift.StringResource(key: "Delete Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Dim
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let dim = Rswift.StringResource(key: "Dim", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Dismiss view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let dismissView = Rswift.StringResource(key: "Dismiss view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Done
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let done = Rswift.StringResource(key: "Done", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Edit
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let edit = Rswift.StringResource(key: "Edit", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Edit Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let editEvent = Rswift.StringResource(key: "Edit Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: End
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let end = Rswift.StringResource(key: "End", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: End time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let endTime = Rswift.StringResource(key: "End time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: English
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let english = Rswift.StringResource(key: "English", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let event = Rswift.StringResource(key: "Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Event List Widget
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let eventListWidget = Rswift.StringResource(key: "Event List Widget", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Event deleted!
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let eventDeleted = Rswift.StringResource(key: "Event deleted!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Event duration
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let eventDuration = Rswift.StringResource(key: "Event duration", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Events
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let events = Rswift.StringResource(key: "Events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Feedback/Report Issue
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let feedbackReportIssue = Rswift.StringResource(key: "Feedback/Report Issue", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Follow system
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let followSystem = Rswift.StringResource(key: "Follow system", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: General
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let general = Rswift.StringResource(key: "General", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Haptic feedback
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let hapticFeedback = Rswift.StringResource(key: "Haptic feedback", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: If you're feeling Clendar is helpful and would like to support the app development effort; like new features, extra themes, app icons in the future; feel free to leave me a tip.  Any tip amount at all helps a lot, thank you very much!
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let ifYouReFeelingClendarIsHelpfulAndWouldLikeToSupportTheAppDevelopmentEffortLikeNewFeaturesExtraThemesAppIconsInTheFutureTipsAreGreatlyAppreciatedAnyTipAmountHelpsALotThankYouVeryMuch = Rswift.StringResource(key: "If you're feeling Clendar is helpful and would like to support the app development effort; like new features, extra themes, app icons in the future; tips are greatly appreciated. Any tip amount helps a lot, thank you very much!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Input event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let inputEvent = Rswift.StringResource(key: "Input event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Keyboard shortcuts
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let keyboardShortcuts = Rswift.StringResource(key: "Keyboard shortcuts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Light
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let light = Rswift.StringResource(key: "Light", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Location
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let location = Rswift.StringResource(key: "Location", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Lunar date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let lunarDate = Rswift.StringResource(key: "Lunar date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Month
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let month = Rswift.StringResource(key: "Month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Month view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let monthView = Rswift.StringResource(key: "Month view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Month view calendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let monthViewCalendar = Rswift.StringResource(key: "Month view calendar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Name
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let name = Rswift.StringResource(key: "Name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: New Clendar Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let newClendarEvent = Rswift.StringResource(key: "New Clendar Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: New Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let newEvent = Rswift.StringResource(key: "New Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: None
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let none = Rswift.StringResource(key: "None", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: OK
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let oK = Rswift.StringResource(key: "OK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Off
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let off = Rswift.StringResource(key: "Off", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: On
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let on = Rswift.StringResource(key: "On", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: One dot
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let oneDot = Rswift.StringResource(key: "One dot", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Open Clendar Settings
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let openClendarSettings = Rswift.StringResource(key: "Open Clendar Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Open Clendar Siri Shortcuts
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let openClendarSiriShortcuts = Rswift.StringResource(key: "Open Clendar Siri Shortcuts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Open Settings
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let openSettings = Rswift.StringResource(key: "Open Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Original
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let original = Rswift.StringResource(key: "Original", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Preferences
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let preferences = Rswift.StringResource(key: "Preferences", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Productivity, increased! 🚀
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let productivityIncreased🚀 = Rswift.StringResource(key: "Productivity, increased! 🚀", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Quick Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let quickEvent = Rswift.StringResource(key: "Quick Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Rate Clendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let rateClendar = Rswift.StringResource(key: "Rate Clendar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Recurring date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let recurringDate = Rswift.StringResource(key: "Recurring date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Recurring event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let recurringEvent = Rswift.StringResource(key: "Recurring event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Save event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let saveEvent = Rswift.StringResource(key: "Save event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Select event end time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let selectEventEndTime = Rswift.StringResource(key: "Select event end time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Select event start time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let selectEventStartTime = Rswift.StringResource(key: "Select event start time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Settings
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let settings = Rswift.StringResource(key: "Settings", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Share Clendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let shareClendar = Rswift.StringResource(key: "Share Clendar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Sharing
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let sharing = Rswift.StringResource(key: "Sharing", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Sharing is caring. If you like Clendar, please leave a review or help sharing this app to the world, thank you!
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let sharingIsCaringIfYouLikeClendarPleaseLeaveAReviewOrHelpSharingThisAppToTheWorldThankYou = Rswift.StringResource(key: "Sharing is caring. If you like Clendar, please leave a review or help sharing this app to the world, thank you!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Show Siri shortcuts view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let showSiriShortcutsView = Rswift.StringResource(key: "Show Siri shortcuts view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Show days out
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let showDaysOut = Rswift.StringResource(key: "Show days out", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Siri Shortcuts
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let siriShortcuts = Rswift.StringResource(key: "Siri Shortcuts", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Start
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let start = Rswift.StringResource(key: "Start", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Start time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let startTime = Rswift.StringResource(key: "Start time", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Supplementary day view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let supplementaryDayView = Rswift.StringResource(key: "Supplementary day view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Swipe down to collapse
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let swipeDownToCollapse = Rswift.StringResource(key: "Swipe down to collapse", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Switch to current date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let switchToCurrentDate = Rswift.StringResource(key: "Switch to current date", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Themes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let themes = Rswift.StringResource(key: "Themes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Tip received. Thank you very much and have a great day! 😊
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let tipReceivedThankYouVeryMuchAndHaveAGreatDay😊 = Rswift.StringResource(key: "Tip received. Thank you very much and have a great day! 😊", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Title of the event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let titleOfTheEvent = Rswift.StringResource(key: "Title of the event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Toggle all day switch
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let toggleAllDaySwitch = Rswift.StringResource(key: "Toggle all day switch", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Unable to determine email sending state
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let unableToDetermineEmailSendingState = Rswift.StringResource(key: "Unable to determine email sending state", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Unable to open email client, please try again later
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let unableToOpenEmailClientPleaseTryAgainLater = Rswift.StringResource(key: "Unable to open email client, please try again later", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Upcoming events
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let upcomingEvents = Rswift.StringResource(key: "Upcoming events", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Version
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let version = Rswift.StringResource(key: "Version", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Vietnamese
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let vietnamese = Rswift.StringResource(key: "Vietnamese", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: View Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let viewEvent = Rswift.StringResource(key: "View Event", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: View mode
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let viewMode = Rswift.StringResource(key: "View mode", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Week
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let week = Rswift.StringResource(key: "Week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Week view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let weekView = Rswift.StringResource(key: "Week view", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Widget theme
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let widgetTheme = Rswift.StringResource(key: "Widget theme", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: You can choose available calendars to show in event list
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let youCanChooseAvailableCalendarsToShownInEventList = Rswift.StringResource(key: "You can choose available calendars to shown in event list", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: You can now quick shortcuts to Siri and Shortcuts app. Try adding one below
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let youCanNowQuickShortcutsToSiriAndShortcutsAppTryAddingOneBelow = Rswift.StringResource(key: "You can now quick shortcuts to Siri and Shortcuts app. Try adding one below", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: Your day events at a glance
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let yourDayEventsAtAGlance = Rswift.StringResource(key: "Your day events at a glance", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: [Beta] You can choose to use experimental natural language parsing mode when create new event. This feature will be improved.
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let betaYouCanChooseToUseExperimentalNaturalLanguageParsingModeWhenCreateNewEventThisFeatureWillBeImproved = Rswift.StringResource(key: "[Beta] You can choose to use experimental natural language parsing mode when create new event. This feature will be improved.", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: minutes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let minutes = Rswift.StringResource(key: "minutes", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: read a book this Friday 8PM...
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let readABookThisFriday8PM = Rswift.StringResource(key: "read a book this Friday 8PM...", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: 🎉 No events for today, enjoy your day! 
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let 🎉NoEventsForTodayEnjoyYourDay = Rswift.StringResource(key: "🎉 No events for today,\nenjoy your day!\n", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)
      /// en translation: 🎉 No more events today, enjoy your day! 
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static let 🎉NoMoreEventsTodayEnjoyYourDay = Rswift.StringResource(key: "🎉 No more events today,\nenjoy your day!\n", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "vi", "ja", "zh-hans", "es", "ko"], comment: nil)

      /// en translation: Add event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func addEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Add event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Add event"
        }

        return NSLocalizedString("Add event", bundle: bundle, comment: "")
      }

      /// en translation: All day
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func allDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("All day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "All day"
        }

        return NSLocalizedString("All day", bundle: bundle, comment: "")
      }

      /// en translation: App info
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func appInfo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("App info", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "App info"
        }

        return NSLocalizedString("App info", bundle: bundle, comment: "")
      }

      /// en translation: Are you sure you want to delete this event?
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func areYouSureYouWantToDeleteThisEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Are you sure you want to delete this event?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Are you sure you want to delete this event?"
        }

        return NSLocalizedString("Are you sure you want to delete this event?", bundle: bundle, comment: "")
      }

      /// en translation: Auto-select day
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func autoSelectDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auto-select day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auto-select day"
        }

        return NSLocalizedString("Auto-select day", bundle: bundle, comment: "")
      }

      /// en translation: Auto-select day when month changes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func autoSelectDayWhenMonthChanges(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auto-select day when month changes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auto-select day when month changes"
        }

        return NSLocalizedString("Auto-select day when month changes", bundle: bundle, comment: "")
      }

      /// en translation: Auto-select first day of month/week when calendar changes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func autoSelectFirstDayOfMonthWeekWhenCalendarChanges(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Auto-select first day of month/week when calendar changes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Auto-select first day of month/week when calendar changes"
        }

        return NSLocalizedString("Auto-select first day of month/week when calendar changes", bundle: bundle, comment: "")
      }

      /// en translation: Available calendars
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func availableCalendars(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Available calendars", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Available calendars"
        }

        return NSLocalizedString("Available calendars", bundle: bundle, comment: "")
      }

      /// en translation: Calendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func calendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calendar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calendar"
        }

        return NSLocalizedString("Calendar", bundle: bundle, comment: "")
      }

      /// en translation: Calendar View
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func calendarView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calendar View", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calendar View"
        }

        return NSLocalizedString("Calendar View", bundle: bundle, comment: "")
      }

      /// en translation: Calendar grid view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func calendarGridView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calendar grid view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calendar grid view"
        }

        return NSLocalizedString("Calendar grid view", bundle: bundle, comment: "")
      }

      /// en translation: Calendars
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func calendars(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calendars", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calendars"
        }

        return NSLocalizedString("Calendars", bundle: bundle, comment: "")
      }

      /// en translation: Calendars Visibility
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func calendarsVisibility(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calendars Visibility", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calendars Visibility"
        }

        return NSLocalizedString("Calendars Visibility", bundle: bundle, comment: "")
      }

      /// en translation: Cancel
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func cancel(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Cancel", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Cancel"
        }

        return NSLocalizedString("Cancel", bundle: bundle, comment: "")
      }

      /// en translation: Change app Language
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func changeAppLanguage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Change app Language", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Change app Language"
        }

        return NSLocalizedString("Change app Language", bundle: bundle, comment: "")
      }

      /// en translation: Check calendar at a glance
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func checkCalendarAtAGlance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Check calendar at a glance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Check calendar at a glance"
        }

        return NSLocalizedString("Check calendar at a glance", bundle: bundle, comment: "")
      }

      /// en translation: Choose your desired app icon
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func chooseYourDesiredAppIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Choose your desired app icon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Choose your desired app icon"
        }

        return NSLocalizedString("Choose your desired app icon", bundle: bundle, comment: "")
      }

      /// en translation: Collapse this view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func collapseThisView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Collapse this view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Collapse this view"
        }

        return NSLocalizedString("Collapse this view", bundle: bundle, comment: "")
      }

      /// en translation: Create new Clendar event(s)
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func createNewClendarEventS(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create new Clendar event(s)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create new Clendar event(s)"
        }

        return NSLocalizedString("Create new Clendar event(s)", bundle: bundle, comment: "")
      }

      /// en translation: Create new event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func createNewEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Create new event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Create new event"
        }

        return NSLocalizedString("Create new event", bundle: bundle, comment: "")
      }

      /// en translation: Custom App Icon
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func customAppIcon(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Custom App Icon", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Custom App Icon"
        }

        return NSLocalizedString("Custom App Icon", bundle: bundle, comment: "")
      }

      /// en translation: Dark
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func dark(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dark", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dark"
        }

        return NSLocalizedString("Dark", bundle: bundle, comment: "")
      }

      /// en translation: Date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func date(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Date"
        }

        return NSLocalizedString("Date", bundle: bundle, comment: "")
      }

      /// en translation: Date Info Widget
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func dateInfoWidget(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Date Info Widget", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Date Info Widget"
        }

        return NSLocalizedString("Date Info Widget", bundle: bundle, comment: "")
      }

      /// en translation: Default
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func `default`(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Default", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Default"
        }

        return NSLocalizedString("Default", bundle: bundle, comment: "")
      }

      /// en translation: Default event duration
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func defaultEventDuration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Default event duration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Default event duration"
        }

        return NSLocalizedString("Default event duration", bundle: bundle, comment: "")
      }

      /// en translation: Delete
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func delete(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete"
        }

        return NSLocalizedString("Delete", bundle: bundle, comment: "")
      }

      /// en translation: Delete Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func deleteEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Delete Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Delete Event"
        }

        return NSLocalizedString("Delete Event", bundle: bundle, comment: "")
      }

      /// en translation: Dim
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func dim(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dim", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dim"
        }

        return NSLocalizedString("Dim", bundle: bundle, comment: "")
      }

      /// en translation: Dismiss view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func dismissView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Dismiss view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Dismiss view"
        }

        return NSLocalizedString("Dismiss view", bundle: bundle, comment: "")
      }

      /// en translation: Done
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func done(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Done", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Done"
        }

        return NSLocalizedString("Done", bundle: bundle, comment: "")
      }

      /// en translation: Edit
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func edit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit"
        }

        return NSLocalizedString("Edit", bundle: bundle, comment: "")
      }

      /// en translation: Edit Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func editEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Edit Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Edit Event"
        }

        return NSLocalizedString("Edit Event", bundle: bundle, comment: "")
      }

      /// en translation: End
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func end(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("End", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "End"
        }

        return NSLocalizedString("End", bundle: bundle, comment: "")
      }

      /// en translation: End time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func endTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("End time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "End time"
        }

        return NSLocalizedString("End time", bundle: bundle, comment: "")
      }

      /// en translation: English
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func english(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("English", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "English"
        }

        return NSLocalizedString("English", bundle: bundle, comment: "")
      }

      /// en translation: Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func event(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event"
        }

        return NSLocalizedString("Event", bundle: bundle, comment: "")
      }

      /// en translation: Event List Widget
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func eventListWidget(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event List Widget", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event List Widget"
        }

        return NSLocalizedString("Event List Widget", bundle: bundle, comment: "")
      }

      /// en translation: Event deleted!
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func eventDeleted(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event deleted!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event deleted!"
        }

        return NSLocalizedString("Event deleted!", bundle: bundle, comment: "")
      }

      /// en translation: Event duration
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func eventDuration(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Event duration", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Event duration"
        }

        return NSLocalizedString("Event duration", bundle: bundle, comment: "")
      }

      /// en translation: Events
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func events(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Events", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Events"
        }

        return NSLocalizedString("Events", bundle: bundle, comment: "")
      }

      /// en translation: Feedback/Report Issue
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func feedbackReportIssue(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Feedback/Report Issue", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Feedback/Report Issue"
        }

        return NSLocalizedString("Feedback/Report Issue", bundle: bundle, comment: "")
      }

      /// en translation: Follow system
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func followSystem(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Follow system", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Follow system"
        }

        return NSLocalizedString("Follow system", bundle: bundle, comment: "")
      }

      /// en translation: General
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func general(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("General", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "General"
        }

        return NSLocalizedString("General", bundle: bundle, comment: "")
      }

      /// en translation: Haptic feedback
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func hapticFeedback(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Haptic feedback", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Haptic feedback"
        }

        return NSLocalizedString("Haptic feedback", bundle: bundle, comment: "")
      }

      /// en translation: If you're feeling Clendar is helpful and would like to support the app development effort; like new features, extra themes, app icons in the future; feel free to leave me a tip.  Any tip amount at all helps a lot, thank you very much!
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func ifYouReFeelingClendarIsHelpfulAndWouldLikeToSupportTheAppDevelopmentEffortLikeNewFeaturesExtraThemesAppIconsInTheFutureTipsAreGreatlyAppreciatedAnyTipAmountHelpsALotThankYouVeryMuch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("If you're feeling Clendar is helpful and would like to support the app development effort; like new features, extra themes, app icons in the future; tips are greatly appreciated. Any tip amount helps a lot, thank you very much!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "If you're feeling Clendar is helpful and would like to support the app development effort; like new features, extra themes, app icons in the future; tips are greatly appreciated. Any tip amount helps a lot, thank you very much!"
        }

        return NSLocalizedString("If you're feeling Clendar is helpful and would like to support the app development effort; like new features, extra themes, app icons in the future; tips are greatly appreciated. Any tip amount helps a lot, thank you very much!", bundle: bundle, comment: "")
      }

      /// en translation: Input event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func inputEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Input event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Input event"
        }

        return NSLocalizedString("Input event", bundle: bundle, comment: "")
      }

      /// en translation: Keyboard shortcuts
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func keyboardShortcuts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Keyboard shortcuts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Keyboard shortcuts"
        }

        return NSLocalizedString("Keyboard shortcuts", bundle: bundle, comment: "")
      }

      /// en translation: Light
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func light(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Light", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Light"
        }

        return NSLocalizedString("Light", bundle: bundle, comment: "")
      }

      /// en translation: Location
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func location(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Location", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Location"
        }

        return NSLocalizedString("Location", bundle: bundle, comment: "")
      }

      /// en translation: Lunar date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func lunarDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Lunar date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Lunar date"
        }

        return NSLocalizedString("Lunar date", bundle: bundle, comment: "")
      }

      /// en translation: Month
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func month(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Month"
        }

        return NSLocalizedString("Month", bundle: bundle, comment: "")
      }

      /// en translation: Month view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func monthView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Month view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Month view"
        }

        return NSLocalizedString("Month view", bundle: bundle, comment: "")
      }

      /// en translation: Month view calendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func monthViewCalendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Month view calendar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Month view calendar"
        }

        return NSLocalizedString("Month view calendar", bundle: bundle, comment: "")
      }

      /// en translation: Name
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Name"
        }

        return NSLocalizedString("Name", bundle: bundle, comment: "")
      }

      /// en translation: New Clendar Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func newClendarEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Clendar Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Clendar Event"
        }

        return NSLocalizedString("New Clendar Event", bundle: bundle, comment: "")
      }

      /// en translation: New Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func newEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("New Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "New Event"
        }

        return NSLocalizedString("New Event", bundle: bundle, comment: "")
      }

      /// en translation: None
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func none(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("None", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "None"
        }

        return NSLocalizedString("None", bundle: bundle, comment: "")
      }

      /// en translation: OK
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func oK(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("OK", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "OK"
        }

        return NSLocalizedString("OK", bundle: bundle, comment: "")
      }

      /// en translation: Off
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func off(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Off", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Off"
        }

        return NSLocalizedString("Off", bundle: bundle, comment: "")
      }

      /// en translation: On
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func on(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("On", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "On"
        }

        return NSLocalizedString("On", bundle: bundle, comment: "")
      }

      /// en translation: One dot
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func oneDot(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("One dot", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "One dot"
        }

        return NSLocalizedString("One dot", bundle: bundle, comment: "")
      }

      /// en translation: Open Clendar Settings
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func openClendarSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open Clendar Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open Clendar Settings"
        }

        return NSLocalizedString("Open Clendar Settings", bundle: bundle, comment: "")
      }

      /// en translation: Open Clendar Siri Shortcuts
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func openClendarSiriShortcuts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open Clendar Siri Shortcuts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open Clendar Siri Shortcuts"
        }

        return NSLocalizedString("Open Clendar Siri Shortcuts", bundle: bundle, comment: "")
      }

      /// en translation: Open Settings
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func openSettings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Open Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Open Settings"
        }

        return NSLocalizedString("Open Settings", bundle: bundle, comment: "")
      }

      /// en translation: Original
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func original(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Original", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Original"
        }

        return NSLocalizedString("Original", bundle: bundle, comment: "")
      }

      /// en translation: Preferences
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func preferences(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Preferences", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Preferences"
        }

        return NSLocalizedString("Preferences", bundle: bundle, comment: "")
      }

      /// en translation: Productivity, increased! 🚀
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func productivityIncreased🚀(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Productivity, increased! 🚀", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Productivity, increased! 🚀"
        }

        return NSLocalizedString("Productivity, increased! 🚀", bundle: bundle, comment: "")
      }

      /// en translation: Quick Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func quickEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Quick Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Quick Event"
        }

        return NSLocalizedString("Quick Event", bundle: bundle, comment: "")
      }

      /// en translation: Rate Clendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func rateClendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Rate Clendar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Rate Clendar"
        }

        return NSLocalizedString("Rate Clendar", bundle: bundle, comment: "")
      }

      /// en translation: Recurring date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func recurringDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Recurring date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Recurring date"
        }

        return NSLocalizedString("Recurring date", bundle: bundle, comment: "")
      }

      /// en translation: Recurring event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func recurringEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Recurring event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Recurring event"
        }

        return NSLocalizedString("Recurring event", bundle: bundle, comment: "")
      }

      /// en translation: Save event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func saveEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Save event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Save event"
        }

        return NSLocalizedString("Save event", bundle: bundle, comment: "")
      }

      /// en translation: Select event end time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func selectEventEndTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select event end time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select event end time"
        }

        return NSLocalizedString("Select event end time", bundle: bundle, comment: "")
      }

      /// en translation: Select event start time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func selectEventStartTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select event start time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select event start time"
        }

        return NSLocalizedString("Select event start time", bundle: bundle, comment: "")
      }

      /// en translation: Settings
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func settings(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Settings", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Settings"
        }

        return NSLocalizedString("Settings", bundle: bundle, comment: "")
      }

      /// en translation: Share Clendar
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func shareClendar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Share Clendar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Share Clendar"
        }

        return NSLocalizedString("Share Clendar", bundle: bundle, comment: "")
      }

      /// en translation: Sharing
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func sharing(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sharing", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sharing"
        }

        return NSLocalizedString("Sharing", bundle: bundle, comment: "")
      }

      /// en translation: Sharing is caring. If you like Clendar, please leave a review or help sharing this app to the world, thank you!
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func sharingIsCaringIfYouLikeClendarPleaseLeaveAReviewOrHelpSharingThisAppToTheWorldThankYou(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sharing is caring. If you like Clendar, please leave a review or help sharing this app to the world, thank you!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sharing is caring. If you like Clendar, please leave a review or help sharing this app to the world, thank you!"
        }

        return NSLocalizedString("Sharing is caring. If you like Clendar, please leave a review or help sharing this app to the world, thank you!", bundle: bundle, comment: "")
      }

      /// en translation: Show Siri shortcuts view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func showSiriShortcutsView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show Siri shortcuts view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show Siri shortcuts view"
        }

        return NSLocalizedString("Show Siri shortcuts view", bundle: bundle, comment: "")
      }

      /// en translation: Show days out
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func showDaysOut(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Show days out", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Show days out"
        }

        return NSLocalizedString("Show days out", bundle: bundle, comment: "")
      }

      /// en translation: Siri Shortcuts
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func siriShortcuts(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Siri Shortcuts", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Siri Shortcuts"
        }

        return NSLocalizedString("Siri Shortcuts", bundle: bundle, comment: "")
      }

      /// en translation: Start
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func start(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start"
        }

        return NSLocalizedString("Start", bundle: bundle, comment: "")
      }

      /// en translation: Start time
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func startTime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Start time", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Start time"
        }

        return NSLocalizedString("Start time", bundle: bundle, comment: "")
      }

      /// en translation: Supplementary day view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func supplementaryDayView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Supplementary day view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Supplementary day view"
        }

        return NSLocalizedString("Supplementary day view", bundle: bundle, comment: "")
      }

      /// en translation: Swipe down to collapse
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func swipeDownToCollapse(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Swipe down to collapse", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Swipe down to collapse"
        }

        return NSLocalizedString("Swipe down to collapse", bundle: bundle, comment: "")
      }

      /// en translation: Switch to current date
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func switchToCurrentDate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Switch to current date", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Switch to current date"
        }

        return NSLocalizedString("Switch to current date", bundle: bundle, comment: "")
      }

      /// en translation: Themes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func themes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Themes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Themes"
        }

        return NSLocalizedString("Themes", bundle: bundle, comment: "")
      }

      /// en translation: Tip received. Thank you very much and have a great day! 😊
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func tipReceivedThankYouVeryMuchAndHaveAGreatDay😊(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tip received. Thank you very much and have a great day! 😊", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tip received. Thank you very much and have a great day! 😊"
        }

        return NSLocalizedString("Tip received. Thank you very much and have a great day! 😊", bundle: bundle, comment: "")
      }

      /// en translation: Title of the event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func titleOfTheEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Title of the event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Title of the event"
        }

        return NSLocalizedString("Title of the event", bundle: bundle, comment: "")
      }

      /// en translation: Toggle all day switch
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func toggleAllDaySwitch(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Toggle all day switch", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Toggle all day switch"
        }

        return NSLocalizedString("Toggle all day switch", bundle: bundle, comment: "")
      }

      /// en translation: Unable to determine email sending state
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func unableToDetermineEmailSendingState(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unable to determine email sending state", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unable to determine email sending state"
        }

        return NSLocalizedString("Unable to determine email sending state", bundle: bundle, comment: "")
      }

      /// en translation: Unable to open email client, please try again later
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func unableToOpenEmailClientPleaseTryAgainLater(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Unable to open email client, please try again later", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Unable to open email client, please try again later"
        }

        return NSLocalizedString("Unable to open email client, please try again later", bundle: bundle, comment: "")
      }

      /// en translation: Upcoming events
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func upcomingEvents(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Upcoming events", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Upcoming events"
        }

        return NSLocalizedString("Upcoming events", bundle: bundle, comment: "")
      }

      /// en translation: Version
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func version(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Version", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Version"
        }

        return NSLocalizedString("Version", bundle: bundle, comment: "")
      }

      /// en translation: Vietnamese
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func vietnamese(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Vietnamese", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Vietnamese"
        }

        return NSLocalizedString("Vietnamese", bundle: bundle, comment: "")
      }

      /// en translation: View Event
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func viewEvent(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View Event", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View Event"
        }

        return NSLocalizedString("View Event", bundle: bundle, comment: "")
      }

      /// en translation: View mode
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func viewMode(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("View mode", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "View mode"
        }

        return NSLocalizedString("View mode", bundle: bundle, comment: "")
      }

      /// en translation: Week
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func week(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Week"
        }

        return NSLocalizedString("Week", bundle: bundle, comment: "")
      }

      /// en translation: Week view
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func weekView(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Week view", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Week view"
        }

        return NSLocalizedString("Week view", bundle: bundle, comment: "")
      }

      /// en translation: Widget theme
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func widgetTheme(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Widget theme", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Widget theme"
        }

        return NSLocalizedString("Widget theme", bundle: bundle, comment: "")
      }

      /// en translation: You can choose available calendars to show in event list
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func youCanChooseAvailableCalendarsToShownInEventList(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You can choose available calendars to shown in event list", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You can choose available calendars to shown in event list"
        }

        return NSLocalizedString("You can choose available calendars to shown in event list", bundle: bundle, comment: "")
      }

      /// en translation: You can now quick shortcuts to Siri and Shortcuts app. Try adding one below
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func youCanNowQuickShortcutsToSiriAndShortcutsAppTryAddingOneBelow(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("You can now quick shortcuts to Siri and Shortcuts app. Try adding one below", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "You can now quick shortcuts to Siri and Shortcuts app. Try adding one below"
        }

        return NSLocalizedString("You can now quick shortcuts to Siri and Shortcuts app. Try adding one below", bundle: bundle, comment: "")
      }

      /// en translation: Your day events at a glance
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func yourDayEventsAtAGlance(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Your day events at a glance", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Your day events at a glance"
        }

        return NSLocalizedString("Your day events at a glance", bundle: bundle, comment: "")
      }

      /// en translation: [Beta] You can choose to use experimental natural language parsing mode when create new event. This feature will be improved.
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func betaYouCanChooseToUseExperimentalNaturalLanguageParsingModeWhenCreateNewEventThisFeatureWillBeImproved(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("[Beta] You can choose to use experimental natural language parsing mode when create new event. This feature will be improved.", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "[Beta] You can choose to use experimental natural language parsing mode when create new event. This feature will be improved."
        }

        return NSLocalizedString("[Beta] You can choose to use experimental natural language parsing mode when create new event. This feature will be improved.", bundle: bundle, comment: "")
      }

      /// en translation: minutes
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func minutes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("minutes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "minutes"
        }

        return NSLocalizedString("minutes", bundle: bundle, comment: "")
      }

      /// en translation: read a book this Friday 8PM...
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func readABookThisFriday8PM(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("read a book this Friday 8PM...", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "read a book this Friday 8PM..."
        }

        return NSLocalizedString("read a book this Friday 8PM...", bundle: bundle, comment: "")
      }

      /// en translation: 🎉 No events for today, enjoy your day! 
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func 🎉NoEventsForTodayEnjoyYourDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("🎉 No events for today,\nenjoy your day!\n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "🎉 No events for today,\nenjoy your day!\n"
        }

        return NSLocalizedString("🎉 No events for today,\nenjoy your day!\n", bundle: bundle, comment: "")
      }

      /// en translation: 🎉 No more events today, enjoy your day! 
      ///
      /// Locales: en, vi, ja, zh-hans, es, ko
      static func 🎉NoMoreEventsTodayEnjoyYourDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("🎉 No more events today,\nenjoy your day!\n", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "🎉 No more events today,\nenjoy your day!\n"
        }

        return NSLocalizedString("🎉 No more events today,\nenjoy your day!\n", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      // There are no resources to validate
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R {
  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AppIconItemCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AppIconItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AppIconItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AppIconItemCell
      }

      fileprivate init() {}
    }

    struct _EventListItemCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EventListItemCell

      let bundle = R.hostingBundle
      let identifier = "EventListItemCell"
      let name = "EventListItemCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> EventListItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EventListItemCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
